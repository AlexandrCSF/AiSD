package sc.vsu.Kotov;

public class Credit {

    public double sum; // Тело(сумма) кредита
    public int period; // На какой срок берется кредит
    public double percent; // Процентная ставка по кредиту
    public Method method = null; // Схема выплат по кредиту (дифференцированные или аннуитетные платежи)


    //Метод, который считаем общую сумму выплат по кредиту
    public int creditSum() {
        int s = 0;
        double k = 1 + (percent / 100); // Коэффициент, на который умножается оставшаяся сумма кредита каждый месяц
        if (method == Method.Annuity) {
            // Формула выведена следующим образом:
            // Мы знаем, что сумма выплат будет одинаоква каждый месяц(т.к. кредит аннуитетный)
            // Значит, каждый месяц то, что осталось на счету кредита будет сначала умножаться на k (начислсяться проценты),
            // а потом производиться выплата до полного погашени кредита
            // Выглядеть это будет подобным образом:
            // ... k(k(Sk - x) - x) -x -... = 0
            // Несложными математическими преобразованиями, с использованием фомулы суммы первых n членов геометрической прогрессии, получаем искомую формулу.
            return (int) (((period * sum * Math.pow(k, period) * (k - 1))) / (Math.pow(k, period) - 1));
        } else if (method == Method.Differentiated) {
            for (int i = 1; i <= period; i++) {
                s += differentedCredit(i);
            }
            return s;
        } else throw new NullPointerException("Не задан метод");
    }

    // Метод, который считает сумму выплаты по кредиту в n-ый месяц
    public int differentedCredit(int n) {
        // Формула выведена следующим образом:
        // Кредит каждый месц будет уменьшаться на одну и ту же величину до полного погашения (т.к. кредит дифференцированный)
        // Эта величина будет равна сумме кредита, разделённой на срок, на который взят кредит(sum / period)
        // Но, также, следует учитывать, что остаток кредита будет умножаться на процентную ставку, которую тоже нужно будет погасить для равномерного уменьшения
        // остатка на счету кредита.("Текущий остаток кредита" * percent / 100)
        // "Текущий остаток кредита =(sum * (period - (n-1))) / period
        // Искомая фомрмула получается путем сложения (sum / period) и ("Текущий остаток кредита" * percent / 100)
        return (int) ((sum / period) + (sum * percent * (period - (n - 1))) / (100 * period));
    }
}
